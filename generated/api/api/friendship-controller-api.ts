/* tslint:disable */
/* eslint-disable */
/**
 * Socially - Backend API
 * Socially is a full-stack web application for people, who want to socialize with other people.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: varadidominik2000@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FriendRequestCreateRequestDto } from '../models';
// @ts-ignore
import { RestApiResponseDtoFriendRequestIncomingResponseDto } from '../models';
// @ts-ignore
import { RestApiResponseDtoFriendRequestOutgoingResponseDto } from '../models';
// @ts-ignore
import { RestApiResponseDtoPageResponseDtoFriendRequestIncomingResponseDto } from '../models';
// @ts-ignore
import { RestApiResponseDtoPageResponseDtoFriendRequestOutgoingResponseDto } from '../models';
/**
 * FriendshipControllerApi - axios parameter creator
 * @export
 */
export const FriendshipControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptIncomingFriendRequest: async (friendshipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendshipId' is not null or undefined
            assertParamExists('acceptIncomingFriendRequest', 'friendshipId', friendshipId)
            const localVarPath = `/friendships/incoming/{friendshipId}/accept`
                .replace(`{${"friendshipId"}}`, encodeURIComponent(String(friendshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FriendRequestCreateRequestDto} friendRequestCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFriendRequest: async (friendRequestCreateRequestDto: FriendRequestCreateRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendRequestCreateRequestDto' is not null or undefined
            assertParamExists('createNewFriendRequest', 'friendRequestCreateRequestDto', friendRequestCreateRequestDto)
            const localVarPath = `/friendships/outgoing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(friendRequestCreateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineIncomingFriendRequest: async (friendshipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendshipId' is not null or undefined
            assertParamExists('declineIncomingFriendRequest', 'friendshipId', friendshipId)
            const localVarPath = `/friendships/incoming/{friendshipId}`
                .replace(`{${"friendshipId"}}`, encodeURIComponent(String(friendshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllIncomingFriendRequestsForCurrentUser: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/friendships/incoming`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOutgoingFriendRequestsForCurrentUser: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/friendships/outgoing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOutgoingFriendRequest: async (friendshipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendshipId' is not null or undefined
            assertParamExists('revokeOutgoingFriendRequest', 'friendshipId', friendshipId)
            const localVarPath = `/friendships/outgoing/{friendshipId}`
                .replace(`{${"friendshipId"}}`, encodeURIComponent(String(friendshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendshipControllerApi - functional programming interface
 * @export
 */
export const FriendshipControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FriendshipControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptIncomingFriendRequest(friendshipId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestApiResponseDtoFriendRequestIncomingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptIncomingFriendRequest(friendshipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FriendRequestCreateRequestDto} friendRequestCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFriendRequest(friendRequestCreateRequestDto: FriendRequestCreateRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestApiResponseDtoFriendRequestOutgoingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFriendRequest(friendRequestCreateRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineIncomingFriendRequest(friendshipId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestApiResponseDtoFriendRequestIncomingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineIncomingFriendRequest(friendshipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllIncomingFriendRequestsForCurrentUser(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestApiResponseDtoPageResponseDtoFriendRequestIncomingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllIncomingFriendRequestsForCurrentUser(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllOutgoingFriendRequestsForCurrentUser(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestApiResponseDtoPageResponseDtoFriendRequestOutgoingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllOutgoingFriendRequestsForCurrentUser(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeOutgoingFriendRequest(friendshipId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestApiResponseDtoFriendRequestOutgoingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeOutgoingFriendRequest(friendshipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FriendshipControllerApi - factory interface
 * @export
 */
export const FriendshipControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FriendshipControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptIncomingFriendRequest(friendshipId: string, options?: any): AxiosPromise<RestApiResponseDtoFriendRequestIncomingResponseDto> {
            return localVarFp.acceptIncomingFriendRequest(friendshipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FriendRequestCreateRequestDto} friendRequestCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFriendRequest(friendRequestCreateRequestDto: FriendRequestCreateRequestDto, options?: any): AxiosPromise<RestApiResponseDtoFriendRequestOutgoingResponseDto> {
            return localVarFp.createNewFriendRequest(friendRequestCreateRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineIncomingFriendRequest(friendshipId: string, options?: any): AxiosPromise<RestApiResponseDtoFriendRequestIncomingResponseDto> {
            return localVarFp.declineIncomingFriendRequest(friendshipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllIncomingFriendRequestsForCurrentUser(page?: number, size?: number, options?: any): AxiosPromise<RestApiResponseDtoPageResponseDtoFriendRequestIncomingResponseDto> {
            return localVarFp.findAllIncomingFriendRequestsForCurrentUser(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOutgoingFriendRequestsForCurrentUser(page?: number, size?: number, options?: any): AxiosPromise<RestApiResponseDtoPageResponseDtoFriendRequestOutgoingResponseDto> {
            return localVarFp.findAllOutgoingFriendRequestsForCurrentUser(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} friendshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOutgoingFriendRequest(friendshipId: string, options?: any): AxiosPromise<RestApiResponseDtoFriendRequestOutgoingResponseDto> {
            return localVarFp.revokeOutgoingFriendRequest(friendshipId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendshipControllerApi - object-oriented interface
 * @export
 * @class FriendshipControllerApi
 * @extends {BaseAPI}
 */
export class FriendshipControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} friendshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public acceptIncomingFriendRequest(friendshipId: string, options?: AxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).acceptIncomingFriendRequest(friendshipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FriendRequestCreateRequestDto} friendRequestCreateRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public createNewFriendRequest(friendRequestCreateRequestDto: FriendRequestCreateRequestDto, options?: AxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).createNewFriendRequest(friendRequestCreateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} friendshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public declineIncomingFriendRequest(friendshipId: string, options?: AxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).declineIncomingFriendRequest(friendshipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public findAllIncomingFriendRequestsForCurrentUser(page?: number, size?: number, options?: AxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).findAllIncomingFriendRequestsForCurrentUser(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public findAllOutgoingFriendRequestsForCurrentUser(page?: number, size?: number, options?: AxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).findAllOutgoingFriendRequestsForCurrentUser(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} friendshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public revokeOutgoingFriendRequest(friendshipId: string, options?: AxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).revokeOutgoingFriendRequest(friendshipId, options).then((request) => request(this.axios, this.basePath));
    }
}
